apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def properties = new Properties()
properties.load(rootProject.file("local.properties").newDataInputStream())
final def AGORA_APP_ID = "${properties.getProperty("AGORA_APP_ID")}"

android {
    compileSdkVersion 31
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "io.agora.test.entfull"
        minSdkVersion 21
        targetSdkVersion 31
        versionCode 4
        versionName "1.0.4"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables {
            useSupportLibrary true
        }
        ndk.abiFilters 'armeabi-v7a','arm64-v8a'//, 'x86', 'x86-64'


    }

    buildTypes {
        release {
            buildConfigField "String", "AGORA_APP_ID", "\"$AGORA_APP_ID\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            debuggable true
            buildConfigField "String", "AGORA_APP_ID", "\"$AGORA_APP_ID\""
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
    buildFeatures {
        viewBinding true
        buildConfig = true
    }
    composeOptions {
        kotlinCompilerExtensionVersion '1.3.2'
    }
    packagingOptions {
        pickFirst 'lib/*/libc++_shared.so'
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }

    applicationVariants.all {
        variant ->
            variant.outputs.all { output ->
                outputFileName = new File(rootProject.name + "_" +
                        "v" + defaultConfig.versionName + "_" +
                        new Date().format("yyyyMMddHHmm") + ".apk")
            }
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.lifecycle:lifecycle-runtime-ktx:2.3.1'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'com.tencent.bugly:crashreport:4.0.4'
    if (new File("${rootProject.rootDir}/maven").exists()) {
        def beautyApiVersion = "$LIB_VERSION"
        implementation("com.github.AgoraIO-Community.BeautyAPI:ByteDance:$beautyApiVersion"){
            // exclude group:'io.agora.rtc', module: 'full-sdk'
            // exclude group:'com.github.AgoraIO-Community.BeautyAPI', module: 'ByteDance-LibEffectAAR'
        }
        implementation("com.github.AgoraIO-Community.BeautyAPI:FaceUnity:$beautyApiVersion"){
            // exclude group:'io.agora.rtc', module: 'full-sdk'
            // exclude group:'com.faceunity', module: 'core'
            // exclude group:'com.faceunity', module: 'model'
        }
        implementation("com.github.AgoraIO-Community.BeautyAPI:SenseTime:$beautyApiVersion"){
            // exclude group:'io.agora.rtc', module: 'full-sdk'
            // exclude group:'com.github.AgoraIO-Community.BeautyAPI', module: 'SenseTime-LibHardwareBuffer'
            // exclude group:'com.github.AgoraIO-Community.BeautyAPI', module: 'SenseTime-LibSenseArSourceManager'
            // exclude group:'com.github.AgoraIO-Community.BeautyAPI', module: 'SenseTime-LibSTMobileJNI'
        }
    } else {
        implementation project(":lib_sensetime")
        implementation project(":lib_faceunity")
        implementation project(":lib_bytedance")
    }

}